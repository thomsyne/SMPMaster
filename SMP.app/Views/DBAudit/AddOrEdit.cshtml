@model SMP.app.Models.DBAudit

@{
    ViewBag.Title = "AddOrEdit";
}

<link href="~/temp/vendors/bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.css" rel="stylesheet" />
<link href="~/temp/vendors/normalize-css/normalize.css" rel="stylesheet" />
<link href="~/temp/vendors/ion.rangeSlider/css/ion.rangeSlider.css" rel="stylesheet" />
<link href="~/temp/vendors/ion.rangeSlider/css/ion.rangeSlider.skinFlat.css" rel="stylesheet" />
<link href="~/temp/vendors/mjolnic-bootstrap-colorpicker/dist/css/bootstrap-colorpicker.min.css" rel="stylesheet" />
<link href="~/temp/vendors/cropper/dist/cropper.min.css" rel="stylesheet" />

    <div class="x_panel">
        <div class="x_title">
            <a class="btn-sm btn-primary" id="" href="@Url.Action("Index","DBAudit")"><i class="fa fa-arrow-left"></i>Back</a>
        </div>

        <div class="x_content">

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                  

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EventDateutc, htmlAttributes: new { @class = "control-label col-md-4 col-sm-3 col-xs-12" })
                            <div class="col-md-8 col-sm-9 col-xs-12">
                                <div class='input-group date' id="EventDate">
                                    @Html.TextBoxFor(model => model.EventDateutc, new { @class = "form-control input-sm" })
                                    @Html.ValidationMessageFor(model => model.EventDateutc)
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EventType, htmlAttributes: new { @class = "control-label col-md-4 col-md-4 col-sm-3 col-xs-12" })
                            <div class="col-md-8 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.EventType, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EventType, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.TableName, htmlAttributes: new { @class = "control-label col-md-4 col-md-4 col-sm-3 col-xs-12" })
                            <div class="col-md-8 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.TableName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TableName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RecordId, htmlAttributes: new { @class = "control-label col-md-4 col-md-4 col-sm-3 col-xs-12" })
                            <div class="col-md-8 col-sm-6 col-xs-12">
                                @Html.DropDownListFor(model => model.RecordId, ViewBag.RecordList as SelectList, "-- Select Record --", new { @class = "form-control select2 input", style = "width:100%" })
                                @Html.ValidationMessageFor(model => model.RecordId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ColumnName, htmlAttributes: new { @class = "control-label col-md-4 col-md-4 col-sm-3 col-xs-12" })
                            <div class="col-md-8 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.ColumnName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ColumnName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                   
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.OriginalValue, htmlAttributes: new { @class = "control-label col-md-4 col-md-4 col-sm-3 col-xs-12" })
                            <div class="col-md-8 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.OriginalValue, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OriginalValue, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.NewValue, htmlAttributes: new { @class = "control-label col-md-4 col-md-4 col-sm-3 col-xs-12" })
                            <div class="col-md-8 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.NewValue, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.NewValue, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10" style="text-align:center;margin:10px;">
                            <input type="submit" value="Save" class="btn-sm btn-success fa fa-check" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

@section Scripts {
@Scripts.Render("~/bundles/jqueryval")
<script src="~/temp/vendors/cropper/dist/cropper.min.js"></script>
<script src="~/temp/vendors/ion.rangeSlider/js/ion.rangeSlider.min.js"></script>
<script src="~/temp/vendors/jquery-knob/dist/jquery.knob.min.js"></script>
<script src="~/temp/vendors/jquery.inputmask/dist/min/jquery.inputmask.bundle.min.js"></script>
<script src="~/temp/vendors/bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>

<script>

    $('#EventDate').datetimepicker({
            format: 'DD.MM.YYYY'
        });
</script>

}